// Code generated by Prisma (prisma@1.34.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  gig: (where?: GigWhereInput) => Promise<boolean>;
  media: (where?: MediaWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  gig: (where: GigWhereUniqueInput) => GigNullablePromise;
  gigs: (args?: {
    where?: GigWhereInput;
    orderBy?: GigOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Gig>;
  gigsConnection: (args?: {
    where?: GigWhereInput;
    orderBy?: GigOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GigConnectionPromise;
  media: (where: MediaWhereUniqueInput) => MediaNullablePromise;
  medias: (args?: {
    where?: MediaWhereInput;
    orderBy?: MediaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Media>;
  mediasConnection: (args?: {
    where?: MediaWhereInput;
    orderBy?: MediaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MediaConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createGig: (data: GigCreateInput) => GigPromise;
  updateGig: (args: {
    data: GigUpdateInput;
    where: GigWhereUniqueInput;
  }) => GigPromise;
  updateManyGigs: (args: {
    data: GigUpdateManyMutationInput;
    where?: GigWhereInput;
  }) => BatchPayloadPromise;
  upsertGig: (args: {
    where: GigWhereUniqueInput;
    create: GigCreateInput;
    update: GigUpdateInput;
  }) => GigPromise;
  deleteGig: (where: GigWhereUniqueInput) => GigPromise;
  deleteManyGigs: (where?: GigWhereInput) => BatchPayloadPromise;
  createMedia: (data: MediaCreateInput) => MediaPromise;
  updateMedia: (args: {
    data: MediaUpdateInput;
    where: MediaWhereUniqueInput;
  }) => MediaPromise;
  updateManyMedias: (args: {
    data: MediaUpdateManyMutationInput;
    where?: MediaWhereInput;
  }) => BatchPayloadPromise;
  upsertMedia: (args: {
    where: MediaWhereUniqueInput;
    create: MediaCreateInput;
    update: MediaUpdateInput;
  }) => MediaPromise;
  deleteMedia: (where: MediaWhereUniqueInput) => MediaPromise;
  deleteManyMedias: (where?: MediaWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  gig: (
    where?: GigSubscriptionWhereInput
  ) => GigSubscriptionPayloadSubscription;
  media: (
    where?: MediaSubscriptionWhereInput
  ) => MediaSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC"
  | "published_ASC"
  | "published_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC";

export type MediaOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "src_ASC"
  | "src_DESC"
  | "caption_ASC"
  | "caption_DESC"
  | "catogories_ASC"
  | "catogories_DESC"
  | "isVideo_ASC"
  | "isVideo_DESC";

export type GigOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "date_ASC"
  | "date_DESC"
  | "time_ASC"
  | "time_DESC"
  | "title_ASC"
  | "title_DESC"
  | "confirmed_ASC"
  | "confirmed_DESC"
  | "done_ASC"
  | "done_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  author?: Maybe<UserWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  media_every?: Maybe<MediaWhereInput>;
  media_some?: Maybe<MediaWhereInput>;
  media_none?: Maybe<MediaWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  shows_every?: Maybe<GigWhereInput>;
  shows_some?: Maybe<GigWhereInput>;
  shows_none?: Maybe<GigWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface MediaWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  src?: Maybe<String>;
  src_not?: Maybe<String>;
  src_in?: Maybe<String[] | String>;
  src_not_in?: Maybe<String[] | String>;
  src_lt?: Maybe<String>;
  src_lte?: Maybe<String>;
  src_gt?: Maybe<String>;
  src_gte?: Maybe<String>;
  src_contains?: Maybe<String>;
  src_not_contains?: Maybe<String>;
  src_starts_with?: Maybe<String>;
  src_not_starts_with?: Maybe<String>;
  src_ends_with?: Maybe<String>;
  src_not_ends_with?: Maybe<String>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  catogories?: Maybe<String>;
  catogories_not?: Maybe<String>;
  catogories_in?: Maybe<String[] | String>;
  catogories_not_in?: Maybe<String[] | String>;
  catogories_lt?: Maybe<String>;
  catogories_lte?: Maybe<String>;
  catogories_gt?: Maybe<String>;
  catogories_gte?: Maybe<String>;
  catogories_contains?: Maybe<String>;
  catogories_not_contains?: Maybe<String>;
  catogories_starts_with?: Maybe<String>;
  catogories_not_starts_with?: Maybe<String>;
  catogories_ends_with?: Maybe<String>;
  catogories_not_ends_with?: Maybe<String>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  submittedBy?: Maybe<UserWhereInput>;
  isVideo?: Maybe<Boolean>;
  isVideo_not?: Maybe<Boolean>;
  AND?: Maybe<MediaWhereInput[] | MediaWhereInput>;
  OR?: Maybe<MediaWhereInput[] | MediaWhereInput>;
  NOT?: Maybe<MediaWhereInput[] | MediaWhereInput>;
}

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  writtenBy?: Maybe<UserWhereInput>;
  media?: Maybe<MediaWhereInput>;
  post?: Maybe<PostWhereInput>;
  gig?: Maybe<GigWhereInput>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export interface GigWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  time?: Maybe<String>;
  time_not?: Maybe<String>;
  time_in?: Maybe<String[] | String>;
  time_not_in?: Maybe<String[] | String>;
  time_lt?: Maybe<String>;
  time_lte?: Maybe<String>;
  time_gt?: Maybe<String>;
  time_gte?: Maybe<String>;
  time_contains?: Maybe<String>;
  time_not_contains?: Maybe<String>;
  time_starts_with?: Maybe<String>;
  time_not_starts_with?: Maybe<String>;
  time_ends_with?: Maybe<String>;
  time_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  confirmed?: Maybe<Boolean>;
  confirmed_not?: Maybe<Boolean>;
  done?: Maybe<Boolean>;
  done_not?: Maybe<Boolean>;
  participants_every?: Maybe<UserWhereInput>;
  participants_some?: Maybe<UserWhereInput>;
  participants_none?: Maybe<UserWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  media_every?: Maybe<MediaWhereInput>;
  media_some?: Maybe<MediaWhereInput>;
  media_none?: Maybe<MediaWhereInput>;
  AND?: Maybe<GigWhereInput[] | GigWhereInput>;
  OR?: Maybe<GigWhereInput[] | GigWhereInput>;
  NOT?: Maybe<GigWhereInput[] | GigWhereInput>;
}

export type GigWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type MediaWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface CommentCreateInput {
  id?: Maybe<ID_Input>;
  text: String;
  writtenBy: UserCreateOneWithoutCommentsInput;
  media?: Maybe<MediaCreateOneWithoutCommentsInput>;
  post?: Maybe<PostCreateOneWithoutCommentsInput>;
  gig?: Maybe<GigCreateOneWithoutCommentsInput>;
}

export interface UserCreateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  name?: Maybe<String>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  media?: Maybe<MediaCreateManyWithoutSubmittedByInput>;
  shows?: Maybe<GigCreateManyWithoutParticipantsInput>;
}

export interface PostCreateManyWithoutAuthorInput {
  create?: Maybe<PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  title: String;
  content?: Maybe<String>;
  published?: Maybe<Boolean>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
}

export interface CommentCreateManyWithoutPostInput {
  create?: Maybe<
    CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  text: String;
  writtenBy: UserCreateOneWithoutCommentsInput;
  media?: Maybe<MediaCreateOneWithoutCommentsInput>;
  gig?: Maybe<GigCreateOneWithoutCommentsInput>;
}

export interface MediaCreateOneWithoutCommentsInput {
  create?: Maybe<MediaCreateWithoutCommentsInput>;
  connect?: Maybe<MediaWhereUniqueInput>;
}

export interface MediaCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  src: String;
  caption?: Maybe<String>;
  catogories?: Maybe<String>;
  submittedBy?: Maybe<UserCreateOneWithoutMediaInput>;
  isVideo?: Maybe<Boolean>;
}

export interface UserCreateOneWithoutMediaInput {
  create?: Maybe<UserCreateWithoutMediaInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutMediaInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  name?: Maybe<String>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutWrittenByInput>;
  shows?: Maybe<GigCreateManyWithoutParticipantsInput>;
}

export interface CommentCreateManyWithoutWrittenByInput {
  create?: Maybe<
    CommentCreateWithoutWrittenByInput[] | CommentCreateWithoutWrittenByInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutWrittenByInput {
  id?: Maybe<ID_Input>;
  text: String;
  media?: Maybe<MediaCreateOneWithoutCommentsInput>;
  post?: Maybe<PostCreateOneWithoutCommentsInput>;
  gig?: Maybe<GigCreateOneWithoutCommentsInput>;
}

export interface PostCreateOneWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  title: String;
  content?: Maybe<String>;
  published?: Maybe<Boolean>;
  author: UserCreateOneWithoutPostsInput;
}

export interface UserCreateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  name?: Maybe<String>;
  media?: Maybe<MediaCreateManyWithoutSubmittedByInput>;
  comments?: Maybe<CommentCreateManyWithoutWrittenByInput>;
  shows?: Maybe<GigCreateManyWithoutParticipantsInput>;
}

export interface MediaCreateManyWithoutSubmittedByInput {
  create?: Maybe<
    MediaCreateWithoutSubmittedByInput[] | MediaCreateWithoutSubmittedByInput
  >;
  connect?: Maybe<MediaWhereUniqueInput[] | MediaWhereUniqueInput>;
}

export interface MediaCreateWithoutSubmittedByInput {
  id?: Maybe<ID_Input>;
  src: String;
  caption?: Maybe<String>;
  catogories?: Maybe<String>;
  comments?: Maybe<CommentCreateManyWithoutMediaInput>;
  isVideo?: Maybe<Boolean>;
}

export interface CommentCreateManyWithoutMediaInput {
  create?: Maybe<
    CommentCreateWithoutMediaInput[] | CommentCreateWithoutMediaInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutMediaInput {
  id?: Maybe<ID_Input>;
  text: String;
  writtenBy: UserCreateOneWithoutCommentsInput;
  post?: Maybe<PostCreateOneWithoutCommentsInput>;
  gig?: Maybe<GigCreateOneWithoutCommentsInput>;
}

export interface GigCreateOneWithoutCommentsInput {
  create?: Maybe<GigCreateWithoutCommentsInput>;
  connect?: Maybe<GigWhereUniqueInput>;
}

export interface GigCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  date: DateTimeInput;
  time: String;
  title: String;
  confirmed?: Maybe<Boolean>;
  done?: Maybe<Boolean>;
  participants?: Maybe<UserCreateManyWithoutShowsInput>;
  media?: Maybe<MediaCreateManyInput>;
}

export interface UserCreateManyWithoutShowsInput {
  create?: Maybe<UserCreateWithoutShowsInput[] | UserCreateWithoutShowsInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutShowsInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  name?: Maybe<String>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  media?: Maybe<MediaCreateManyWithoutSubmittedByInput>;
  comments?: Maybe<CommentCreateManyWithoutWrittenByInput>;
}

export interface MediaCreateManyInput {
  create?: Maybe<MediaCreateInput[] | MediaCreateInput>;
  connect?: Maybe<MediaWhereUniqueInput[] | MediaWhereUniqueInput>;
}

export interface MediaCreateInput {
  id?: Maybe<ID_Input>;
  src: String;
  caption?: Maybe<String>;
  catogories?: Maybe<String>;
  comments?: Maybe<CommentCreateManyWithoutMediaInput>;
  submittedBy?: Maybe<UserCreateOneWithoutMediaInput>;
  isVideo?: Maybe<Boolean>;
}

export interface GigCreateManyWithoutParticipantsInput {
  create?: Maybe<
    GigCreateWithoutParticipantsInput[] | GigCreateWithoutParticipantsInput
  >;
  connect?: Maybe<GigWhereUniqueInput[] | GigWhereUniqueInput>;
}

export interface GigCreateWithoutParticipantsInput {
  id?: Maybe<ID_Input>;
  date: DateTimeInput;
  time: String;
  title: String;
  confirmed?: Maybe<Boolean>;
  done?: Maybe<Boolean>;
  comments?: Maybe<CommentCreateManyWithoutGigInput>;
  media?: Maybe<MediaCreateManyInput>;
}

export interface CommentCreateManyWithoutGigInput {
  create?: Maybe<CommentCreateWithoutGigInput[] | CommentCreateWithoutGigInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutGigInput {
  id?: Maybe<ID_Input>;
  text: String;
  writtenBy: UserCreateOneWithoutCommentsInput;
  media?: Maybe<MediaCreateOneWithoutCommentsInput>;
  post?: Maybe<PostCreateOneWithoutCommentsInput>;
}

export interface CommentUpdateInput {
  text?: Maybe<String>;
  writtenBy?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
  media?: Maybe<MediaUpdateOneWithoutCommentsInput>;
  post?: Maybe<PostUpdateOneWithoutCommentsInput>;
  gig?: Maybe<GigUpdateOneWithoutCommentsInput>;
}

export interface UserUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  update?: Maybe<UserUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCommentsDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  media?: Maybe<MediaUpdateManyWithoutSubmittedByInput>;
  shows?: Maybe<GigUpdateManyWithoutParticipantsInput>;
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: Maybe<PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    | PostUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    | PostUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutAuthorDataInput;
}

export interface PostUpdateWithoutAuthorDataInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  published?: Maybe<Boolean>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
}

export interface CommentUpdateManyWithoutPostInput {
  create?: Maybe<
    CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutPostInput[]
    | CommentUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutPostInput[]
    | CommentUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutPostDataInput;
}

export interface CommentUpdateWithoutPostDataInput {
  text?: Maybe<String>;
  writtenBy?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
  media?: Maybe<MediaUpdateOneWithoutCommentsInput>;
  gig?: Maybe<GigUpdateOneWithoutCommentsInput>;
}

export interface MediaUpdateOneWithoutCommentsInput {
  create?: Maybe<MediaCreateWithoutCommentsInput>;
  update?: Maybe<MediaUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<MediaUpsertWithoutCommentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<MediaWhereUniqueInput>;
}

export interface MediaUpdateWithoutCommentsDataInput {
  src?: Maybe<String>;
  caption?: Maybe<String>;
  catogories?: Maybe<String>;
  submittedBy?: Maybe<UserUpdateOneWithoutMediaInput>;
  isVideo?: Maybe<Boolean>;
}

export interface UserUpdateOneWithoutMediaInput {
  create?: Maybe<UserCreateWithoutMediaInput>;
  update?: Maybe<UserUpdateWithoutMediaDataInput>;
  upsert?: Maybe<UserUpsertWithoutMediaInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutMediaDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutWrittenByInput>;
  shows?: Maybe<GigUpdateManyWithoutParticipantsInput>;
}

export interface CommentUpdateManyWithoutWrittenByInput {
  create?: Maybe<
    CommentCreateWithoutWrittenByInput[] | CommentCreateWithoutWrittenByInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutWrittenByInput[]
    | CommentUpdateWithWhereUniqueWithoutWrittenByInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutWrittenByInput[]
    | CommentUpsertWithWhereUniqueWithoutWrittenByInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutWrittenByInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutWrittenByDataInput;
}

export interface CommentUpdateWithoutWrittenByDataInput {
  text?: Maybe<String>;
  media?: Maybe<MediaUpdateOneWithoutCommentsInput>;
  post?: Maybe<PostUpdateOneWithoutCommentsInput>;
  gig?: Maybe<GigUpdateOneWithoutCommentsInput>;
}

export interface PostUpdateOneWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  update?: Maybe<PostUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<PostUpsertWithoutCommentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostUpdateWithoutCommentsDataInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  published?: Maybe<Boolean>;
  author?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  update?: Maybe<UserUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPostsDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  media?: Maybe<MediaUpdateManyWithoutSubmittedByInput>;
  comments?: Maybe<CommentUpdateManyWithoutWrittenByInput>;
  shows?: Maybe<GigUpdateManyWithoutParticipantsInput>;
}

export interface MediaUpdateManyWithoutSubmittedByInput {
  create?: Maybe<
    MediaCreateWithoutSubmittedByInput[] | MediaCreateWithoutSubmittedByInput
  >;
  delete?: Maybe<MediaWhereUniqueInput[] | MediaWhereUniqueInput>;
  connect?: Maybe<MediaWhereUniqueInput[] | MediaWhereUniqueInput>;
  set?: Maybe<MediaWhereUniqueInput[] | MediaWhereUniqueInput>;
  disconnect?: Maybe<MediaWhereUniqueInput[] | MediaWhereUniqueInput>;
  update?: Maybe<
    | MediaUpdateWithWhereUniqueWithoutSubmittedByInput[]
    | MediaUpdateWithWhereUniqueWithoutSubmittedByInput
  >;
  upsert?: Maybe<
    | MediaUpsertWithWhereUniqueWithoutSubmittedByInput[]
    | MediaUpsertWithWhereUniqueWithoutSubmittedByInput
  >;
  deleteMany?: Maybe<MediaScalarWhereInput[] | MediaScalarWhereInput>;
  updateMany?: Maybe<
    MediaUpdateManyWithWhereNestedInput[] | MediaUpdateManyWithWhereNestedInput
  >;
}

export interface MediaUpdateWithWhereUniqueWithoutSubmittedByInput {
  where: MediaWhereUniqueInput;
  data: MediaUpdateWithoutSubmittedByDataInput;
}

export interface MediaUpdateWithoutSubmittedByDataInput {
  src?: Maybe<String>;
  caption?: Maybe<String>;
  catogories?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutMediaInput>;
  isVideo?: Maybe<Boolean>;
}

export interface CommentUpdateManyWithoutMediaInput {
  create?: Maybe<
    CommentCreateWithoutMediaInput[] | CommentCreateWithoutMediaInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutMediaInput[]
    | CommentUpdateWithWhereUniqueWithoutMediaInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutMediaInput[]
    | CommentUpsertWithWhereUniqueWithoutMediaInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutMediaInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutMediaDataInput;
}

export interface CommentUpdateWithoutMediaDataInput {
  text?: Maybe<String>;
  writtenBy?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
  post?: Maybe<PostUpdateOneWithoutCommentsInput>;
  gig?: Maybe<GigUpdateOneWithoutCommentsInput>;
}

export interface GigUpdateOneWithoutCommentsInput {
  create?: Maybe<GigCreateWithoutCommentsInput>;
  update?: Maybe<GigUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<GigUpsertWithoutCommentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<GigWhereUniqueInput>;
}

export interface GigUpdateWithoutCommentsDataInput {
  date?: Maybe<DateTimeInput>;
  time?: Maybe<String>;
  title?: Maybe<String>;
  confirmed?: Maybe<Boolean>;
  done?: Maybe<Boolean>;
  participants?: Maybe<UserUpdateManyWithoutShowsInput>;
  media?: Maybe<MediaUpdateManyInput>;
}

export interface UserUpdateManyWithoutShowsInput {
  create?: Maybe<UserCreateWithoutShowsInput[] | UserCreateWithoutShowsInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutShowsInput[]
    | UserUpdateWithWhereUniqueWithoutShowsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutShowsInput[]
    | UserUpsertWithWhereUniqueWithoutShowsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutShowsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutShowsDataInput;
}

export interface UserUpdateWithoutShowsDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  media?: Maybe<MediaUpdateManyWithoutSubmittedByInput>;
  comments?: Maybe<CommentUpdateManyWithoutWrittenByInput>;
}

export interface UserUpsertWithWhereUniqueWithoutShowsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutShowsDataInput;
  create: UserCreateWithoutShowsInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
}

export interface MediaUpdateManyInput {
  create?: Maybe<MediaCreateInput[] | MediaCreateInput>;
  update?: Maybe<
    | MediaUpdateWithWhereUniqueNestedInput[]
    | MediaUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | MediaUpsertWithWhereUniqueNestedInput[]
    | MediaUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<MediaWhereUniqueInput[] | MediaWhereUniqueInput>;
  connect?: Maybe<MediaWhereUniqueInput[] | MediaWhereUniqueInput>;
  set?: Maybe<MediaWhereUniqueInput[] | MediaWhereUniqueInput>;
  disconnect?: Maybe<MediaWhereUniqueInput[] | MediaWhereUniqueInput>;
  deleteMany?: Maybe<MediaScalarWhereInput[] | MediaScalarWhereInput>;
  updateMany?: Maybe<
    MediaUpdateManyWithWhereNestedInput[] | MediaUpdateManyWithWhereNestedInput
  >;
}

export interface MediaUpdateWithWhereUniqueNestedInput {
  where: MediaWhereUniqueInput;
  data: MediaUpdateDataInput;
}

export interface MediaUpdateDataInput {
  src?: Maybe<String>;
  caption?: Maybe<String>;
  catogories?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutMediaInput>;
  submittedBy?: Maybe<UserUpdateOneWithoutMediaInput>;
  isVideo?: Maybe<Boolean>;
}

export interface MediaUpsertWithWhereUniqueNestedInput {
  where: MediaWhereUniqueInput;
  update: MediaUpdateDataInput;
  create: MediaCreateInput;
}

export interface MediaScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  src?: Maybe<String>;
  src_not?: Maybe<String>;
  src_in?: Maybe<String[] | String>;
  src_not_in?: Maybe<String[] | String>;
  src_lt?: Maybe<String>;
  src_lte?: Maybe<String>;
  src_gt?: Maybe<String>;
  src_gte?: Maybe<String>;
  src_contains?: Maybe<String>;
  src_not_contains?: Maybe<String>;
  src_starts_with?: Maybe<String>;
  src_not_starts_with?: Maybe<String>;
  src_ends_with?: Maybe<String>;
  src_not_ends_with?: Maybe<String>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  catogories?: Maybe<String>;
  catogories_not?: Maybe<String>;
  catogories_in?: Maybe<String[] | String>;
  catogories_not_in?: Maybe<String[] | String>;
  catogories_lt?: Maybe<String>;
  catogories_lte?: Maybe<String>;
  catogories_gt?: Maybe<String>;
  catogories_gte?: Maybe<String>;
  catogories_contains?: Maybe<String>;
  catogories_not_contains?: Maybe<String>;
  catogories_starts_with?: Maybe<String>;
  catogories_not_starts_with?: Maybe<String>;
  catogories_ends_with?: Maybe<String>;
  catogories_not_ends_with?: Maybe<String>;
  isVideo?: Maybe<Boolean>;
  isVideo_not?: Maybe<Boolean>;
  AND?: Maybe<MediaScalarWhereInput[] | MediaScalarWhereInput>;
  OR?: Maybe<MediaScalarWhereInput[] | MediaScalarWhereInput>;
  NOT?: Maybe<MediaScalarWhereInput[] | MediaScalarWhereInput>;
}

export interface MediaUpdateManyWithWhereNestedInput {
  where: MediaScalarWhereInput;
  data: MediaUpdateManyDataInput;
}

export interface MediaUpdateManyDataInput {
  src?: Maybe<String>;
  caption?: Maybe<String>;
  catogories?: Maybe<String>;
  isVideo?: Maybe<Boolean>;
}

export interface GigUpsertWithoutCommentsInput {
  update: GigUpdateWithoutCommentsDataInput;
  create: GigCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutMediaInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutMediaDataInput;
  create: CommentCreateWithoutMediaInput;
}

export interface CommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface CommentUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface MediaUpsertWithWhereUniqueWithoutSubmittedByInput {
  where: MediaWhereUniqueInput;
  update: MediaUpdateWithoutSubmittedByDataInput;
  create: MediaCreateWithoutSubmittedByInput;
}

export interface GigUpdateManyWithoutParticipantsInput {
  create?: Maybe<
    GigCreateWithoutParticipantsInput[] | GigCreateWithoutParticipantsInput
  >;
  delete?: Maybe<GigWhereUniqueInput[] | GigWhereUniqueInput>;
  connect?: Maybe<GigWhereUniqueInput[] | GigWhereUniqueInput>;
  set?: Maybe<GigWhereUniqueInput[] | GigWhereUniqueInput>;
  disconnect?: Maybe<GigWhereUniqueInput[] | GigWhereUniqueInput>;
  update?: Maybe<
    | GigUpdateWithWhereUniqueWithoutParticipantsInput[]
    | GigUpdateWithWhereUniqueWithoutParticipantsInput
  >;
  upsert?: Maybe<
    | GigUpsertWithWhereUniqueWithoutParticipantsInput[]
    | GigUpsertWithWhereUniqueWithoutParticipantsInput
  >;
  deleteMany?: Maybe<GigScalarWhereInput[] | GigScalarWhereInput>;
  updateMany?: Maybe<
    GigUpdateManyWithWhereNestedInput[] | GigUpdateManyWithWhereNestedInput
  >;
}

export interface GigUpdateWithWhereUniqueWithoutParticipantsInput {
  where: GigWhereUniqueInput;
  data: GigUpdateWithoutParticipantsDataInput;
}

export interface GigUpdateWithoutParticipantsDataInput {
  date?: Maybe<DateTimeInput>;
  time?: Maybe<String>;
  title?: Maybe<String>;
  confirmed?: Maybe<Boolean>;
  done?: Maybe<Boolean>;
  comments?: Maybe<CommentUpdateManyWithoutGigInput>;
  media?: Maybe<MediaUpdateManyInput>;
}

export interface CommentUpdateManyWithoutGigInput {
  create?: Maybe<CommentCreateWithoutGigInput[] | CommentCreateWithoutGigInput>;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutGigInput[]
    | CommentUpdateWithWhereUniqueWithoutGigInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutGigInput[]
    | CommentUpsertWithWhereUniqueWithoutGigInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutGigInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutGigDataInput;
}

export interface CommentUpdateWithoutGigDataInput {
  text?: Maybe<String>;
  writtenBy?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
  media?: Maybe<MediaUpdateOneWithoutCommentsInput>;
  post?: Maybe<PostUpdateOneWithoutCommentsInput>;
}

export interface CommentUpsertWithWhereUniqueWithoutGigInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutGigDataInput;
  create: CommentCreateWithoutGigInput;
}

export interface GigUpsertWithWhereUniqueWithoutParticipantsInput {
  where: GigWhereUniqueInput;
  update: GigUpdateWithoutParticipantsDataInput;
  create: GigCreateWithoutParticipantsInput;
}

export interface GigScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  time?: Maybe<String>;
  time_not?: Maybe<String>;
  time_in?: Maybe<String[] | String>;
  time_not_in?: Maybe<String[] | String>;
  time_lt?: Maybe<String>;
  time_lte?: Maybe<String>;
  time_gt?: Maybe<String>;
  time_gte?: Maybe<String>;
  time_contains?: Maybe<String>;
  time_not_contains?: Maybe<String>;
  time_starts_with?: Maybe<String>;
  time_not_starts_with?: Maybe<String>;
  time_ends_with?: Maybe<String>;
  time_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  confirmed?: Maybe<Boolean>;
  confirmed_not?: Maybe<Boolean>;
  done?: Maybe<Boolean>;
  done_not?: Maybe<Boolean>;
  AND?: Maybe<GigScalarWhereInput[] | GigScalarWhereInput>;
  OR?: Maybe<GigScalarWhereInput[] | GigScalarWhereInput>;
  NOT?: Maybe<GigScalarWhereInput[] | GigScalarWhereInput>;
}

export interface GigUpdateManyWithWhereNestedInput {
  where: GigScalarWhereInput;
  data: GigUpdateManyDataInput;
}

export interface GigUpdateManyDataInput {
  date?: Maybe<DateTimeInput>;
  time?: Maybe<String>;
  title?: Maybe<String>;
  confirmed?: Maybe<Boolean>;
  done?: Maybe<Boolean>;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput;
  create: PostCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutWrittenByInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutWrittenByDataInput;
  create: CommentCreateWithoutWrittenByInput;
}

export interface UserUpsertWithoutMediaInput {
  update: UserUpdateWithoutMediaDataInput;
  create: UserCreateWithoutMediaInput;
}

export interface MediaUpsertWithoutCommentsInput {
  update: MediaUpdateWithoutCommentsDataInput;
  create: MediaCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutPostDataInput;
  create: CommentCreateWithoutPostInput;
}

export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutAuthorDataInput;
  create: PostCreateWithoutAuthorInput;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface PostUpdateManyDataInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  published?: Maybe<Boolean>;
}

export interface UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput;
  create: UserCreateWithoutCommentsInput;
}

export interface CommentUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface GigCreateInput {
  id?: Maybe<ID_Input>;
  date: DateTimeInput;
  time: String;
  title: String;
  confirmed?: Maybe<Boolean>;
  done?: Maybe<Boolean>;
  participants?: Maybe<UserCreateManyWithoutShowsInput>;
  comments?: Maybe<CommentCreateManyWithoutGigInput>;
  media?: Maybe<MediaCreateManyInput>;
}

export interface GigUpdateInput {
  date?: Maybe<DateTimeInput>;
  time?: Maybe<String>;
  title?: Maybe<String>;
  confirmed?: Maybe<Boolean>;
  done?: Maybe<Boolean>;
  participants?: Maybe<UserUpdateManyWithoutShowsInput>;
  comments?: Maybe<CommentUpdateManyWithoutGigInput>;
  media?: Maybe<MediaUpdateManyInput>;
}

export interface GigUpdateManyMutationInput {
  date?: Maybe<DateTimeInput>;
  time?: Maybe<String>;
  title?: Maybe<String>;
  confirmed?: Maybe<Boolean>;
  done?: Maybe<Boolean>;
}

export interface MediaUpdateInput {
  src?: Maybe<String>;
  caption?: Maybe<String>;
  catogories?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutMediaInput>;
  submittedBy?: Maybe<UserUpdateOneWithoutMediaInput>;
  isVideo?: Maybe<Boolean>;
}

export interface MediaUpdateManyMutationInput {
  src?: Maybe<String>;
  caption?: Maybe<String>;
  catogories?: Maybe<String>;
  isVideo?: Maybe<Boolean>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  content?: Maybe<String>;
  published?: Maybe<Boolean>;
  author: UserCreateOneWithoutPostsInput;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
}

export interface PostUpdateInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  published?: Maybe<Boolean>;
  author?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
}

export interface PostUpdateManyMutationInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  published?: Maybe<Boolean>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  name?: Maybe<String>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  media?: Maybe<MediaCreateManyWithoutSubmittedByInput>;
  comments?: Maybe<CommentCreateManyWithoutWrittenByInput>;
  shows?: Maybe<GigCreateManyWithoutParticipantsInput>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  media?: Maybe<MediaUpdateManyWithoutSubmittedByInput>;
  comments?: Maybe<CommentUpdateManyWithoutWrittenByInput>;
  shows?: Maybe<GigUpdateManyWithoutParticipantsInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface GigSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GigWhereInput>;
  AND?: Maybe<GigSubscriptionWhereInput[] | GigSubscriptionWhereInput>;
  OR?: Maybe<GigSubscriptionWhereInput[] | GigSubscriptionWhereInput>;
  NOT?: Maybe<GigSubscriptionWhereInput[] | GigSubscriptionWhereInput>;
}

export interface MediaSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MediaWhereInput>;
  AND?: Maybe<MediaSubscriptionWhereInput[] | MediaSubscriptionWhereInput>;
  OR?: Maybe<MediaSubscriptionWhereInput[] | MediaSubscriptionWhereInput>;
  NOT?: Maybe<MediaSubscriptionWhereInput[] | MediaSubscriptionWhereInput>;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Comment {
  id: ID_Output;
  text: String;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  writtenBy: <T = UserPromise>() => T;
  media: <T = MediaPromise>() => T;
  post: <T = PostPromise>() => T;
  gig: <T = GigPromise>() => T;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  writtenBy: <T = UserSubscription>() => T;
  media: <T = MediaSubscription>() => T;
  post: <T = PostSubscription>() => T;
  gig: <T = GigSubscription>() => T;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  writtenBy: <T = UserPromise>() => T;
  media: <T = MediaPromise>() => T;
  post: <T = PostPromise>() => T;
  gig: <T = GigPromise>() => T;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  name?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  media: <T = FragmentableArray<Media>>(args?: {
    where?: MediaWhereInput;
    orderBy?: MediaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  shows: <T = FragmentableArray<Gig>>(args?: {
    where?: GigWhereInput;
    orderBy?: GigOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  media: <T = Promise<AsyncIterator<MediaSubscription>>>(args?: {
    where?: MediaWhereInput;
    orderBy?: MediaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  shows: <T = Promise<AsyncIterator<GigSubscription>>>(args?: {
    where?: GigWhereInput;
    orderBy?: GigOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  media: <T = FragmentableArray<Media>>(args?: {
    where?: MediaWhereInput;
    orderBy?: MediaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  shows: <T = FragmentableArray<Gig>>(args?: {
    where?: GigWhereInput;
    orderBy?: GigOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Post {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  content?: String;
  published: Boolean;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  published: () => Promise<Boolean>;
  author: <T = UserPromise>() => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  author: <T = UserSubscription>() => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  published: () => Promise<Boolean>;
  author: <T = UserPromise>() => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Media {
  id: ID_Output;
  src: String;
  caption?: String;
  catogories?: String;
  isVideo?: Boolean;
}

export interface MediaPromise extends Promise<Media>, Fragmentable {
  id: () => Promise<ID_Output>;
  src: () => Promise<String>;
  caption: () => Promise<String>;
  catogories: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  submittedBy: <T = UserPromise>() => T;
  isVideo: () => Promise<Boolean>;
}

export interface MediaSubscription
  extends Promise<AsyncIterator<Media>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  src: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  catogories: () => Promise<AsyncIterator<String>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  submittedBy: <T = UserSubscription>() => T;
  isVideo: () => Promise<AsyncIterator<Boolean>>;
}

export interface MediaNullablePromise
  extends Promise<Media | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  src: () => Promise<String>;
  caption: () => Promise<String>;
  catogories: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  submittedBy: <T = UserPromise>() => T;
  isVideo: () => Promise<Boolean>;
}

export interface Gig {
  id: ID_Output;
  date: DateTimeOutput;
  time: String;
  title: String;
  confirmed?: Boolean;
  done?: Boolean;
}

export interface GigPromise extends Promise<Gig>, Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<DateTimeOutput>;
  time: () => Promise<String>;
  title: () => Promise<String>;
  confirmed: () => Promise<Boolean>;
  done: () => Promise<Boolean>;
  participants: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  media: <T = FragmentableArray<Media>>(args?: {
    where?: MediaWhereInput;
    orderBy?: MediaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GigSubscription
  extends Promise<AsyncIterator<Gig>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  time: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  confirmed: () => Promise<AsyncIterator<Boolean>>;
  done: () => Promise<AsyncIterator<Boolean>>;
  participants: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  media: <T = Promise<AsyncIterator<MediaSubscription>>>(args?: {
    where?: MediaWhereInput;
    orderBy?: MediaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GigNullablePromise extends Promise<Gig | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<DateTimeOutput>;
  time: () => Promise<String>;
  title: () => Promise<String>;
  confirmed: () => Promise<Boolean>;
  done: () => Promise<Boolean>;
  participants: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  media: <T = FragmentableArray<Media>>(args?: {
    where?: MediaWhereInput;
    orderBy?: MediaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GigConnection {
  pageInfo: PageInfo;
  edges: GigEdge[];
}

export interface GigConnectionPromise
  extends Promise<GigConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GigEdge>>() => T;
  aggregate: <T = AggregateGigPromise>() => T;
}

export interface GigConnectionSubscription
  extends Promise<AsyncIterator<GigConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GigEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGigSubscription>() => T;
}

export interface GigEdge {
  node: Gig;
  cursor: String;
}

export interface GigEdgePromise extends Promise<GigEdge>, Fragmentable {
  node: <T = GigPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GigEdgeSubscription
  extends Promise<AsyncIterator<GigEdge>>,
    Fragmentable {
  node: <T = GigSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGig {
  count: Int;
}

export interface AggregateGigPromise
  extends Promise<AggregateGig>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGigSubscription
  extends Promise<AsyncIterator<AggregateGig>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MediaConnection {
  pageInfo: PageInfo;
  edges: MediaEdge[];
}

export interface MediaConnectionPromise
  extends Promise<MediaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MediaEdge>>() => T;
  aggregate: <T = AggregateMediaPromise>() => T;
}

export interface MediaConnectionSubscription
  extends Promise<AsyncIterator<MediaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MediaEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMediaSubscription>() => T;
}

export interface MediaEdge {
  node: Media;
  cursor: String;
}

export interface MediaEdgePromise extends Promise<MediaEdge>, Fragmentable {
  node: <T = MediaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MediaEdgeSubscription
  extends Promise<AsyncIterator<MediaEdge>>,
    Fragmentable {
  node: <T = MediaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMedia {
  count: Int;
}

export interface AggregateMediaPromise
  extends Promise<AggregateMedia>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMediaSubscription
  extends Promise<AsyncIterator<AggregateMedia>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  text: String;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface GigSubscriptionPayload {
  mutation: MutationType;
  node: Gig;
  updatedFields: String[];
  previousValues: GigPreviousValues;
}

export interface GigSubscriptionPayloadPromise
  extends Promise<GigSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GigPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GigPreviousValuesPromise>() => T;
}

export interface GigSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GigSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GigSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GigPreviousValuesSubscription>() => T;
}

export interface GigPreviousValues {
  id: ID_Output;
  date: DateTimeOutput;
  time: String;
  title: String;
  confirmed?: Boolean;
  done?: Boolean;
}

export interface GigPreviousValuesPromise
  extends Promise<GigPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<DateTimeOutput>;
  time: () => Promise<String>;
  title: () => Promise<String>;
  confirmed: () => Promise<Boolean>;
  done: () => Promise<Boolean>;
}

export interface GigPreviousValuesSubscription
  extends Promise<AsyncIterator<GigPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  time: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  confirmed: () => Promise<AsyncIterator<Boolean>>;
  done: () => Promise<AsyncIterator<Boolean>>;
}

export interface MediaSubscriptionPayload {
  mutation: MutationType;
  node: Media;
  updatedFields: String[];
  previousValues: MediaPreviousValues;
}

export interface MediaSubscriptionPayloadPromise
  extends Promise<MediaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MediaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MediaPreviousValuesPromise>() => T;
}

export interface MediaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MediaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MediaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MediaPreviousValuesSubscription>() => T;
}

export interface MediaPreviousValues {
  id: ID_Output;
  src: String;
  caption?: String;
  catogories?: String;
  isVideo?: Boolean;
}

export interface MediaPreviousValuesPromise
  extends Promise<MediaPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  src: () => Promise<String>;
  caption: () => Promise<String>;
  catogories: () => Promise<String>;
  isVideo: () => Promise<Boolean>;
}

export interface MediaPreviousValuesSubscription
  extends Promise<AsyncIterator<MediaPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  src: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  catogories: () => Promise<AsyncIterator<String>>;
  isVideo: () => Promise<AsyncIterator<Boolean>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  content?: String;
  published: Boolean;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  published: () => Promise<Boolean>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  name?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Gig",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "Media",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
