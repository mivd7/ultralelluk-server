scalar DateTime
scalar Time

type Query {
  feedPosts: [Post!]!
  feedCalendar: [CalendarItem!]!
  feedCalendarItem: CalendarItem
  feedAllMedia: [Media!]!
  searchPhoto(searchString: String): [Media!]!
  searchVideo(searchString: String): [Media!]!
  searchCalendarItem(searchString: String): [CalendarItem!]!
  feedGigs: [Gig!]!
  filterGigs(searchString: String): [Gig!]!
  filterPosts(searchString: String): [Post!]!
  post(id: ID!): Post
  gig(id: ID!): Gig
  media(id: ID!): Media
  calendarItem(id: ID!): CalendarItem
}

type Mutation {
  signup(email: String!, name: String, password: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  createDraft(title: String!, content: String!, published: Boolean!, userId: ID!): Post!
  createCalendarItem(date: String!, time: String!, description: String!, gigId: ID): CalendarItem!
  deleteCalendarItem(id: ID!): CalendarItem
  updateCalendarItem(id: ID!, date: String, time: String, description: String): CalendarItem
  deletePost(id: ID!): Post
  publish(id: ID!): Post
  createGig(date: String!, time: String!, title: String!): Gig
}

type User {
  id: ID!
  email: String!
  name: String
  contributions: Int!
  posts: [Post!]!
  comments: [Comment!]!
  shows: [Gig!]
}

type Post {
  id: ID!
  createdAt: DateTime! 
  updatedAt: DateTime! 
  title: String!
  content: String
  published: Boolean!
  author: User!
  comments: [Comment!]!
}

type Gig {
  id: ID!
  date: DateTime!
  time: String!
  title: String!
  confirmed: Boolean
  done: Boolean
  participants: [User!]!
  comments: [Comment!]
  media: [Media!]!
  calendarItem: CalendarItem!
}

type CalendarItem {
  id: ID!
  date: DateTime!
  time: DateTime
  description: String!
  participants: [User!]!
  comments: [Comment!]
  gig: Gig
}

type Comment {
  id: ID!
  text: String!
  writtenBy: User!
}

type Media {
  id: ID!
  url: String!
  caption: String
  event: Gig!
  comments: [Comment!]
  isVideo: Boolean
}

type AuthPayload {
  token: String!
  user: User!
}
